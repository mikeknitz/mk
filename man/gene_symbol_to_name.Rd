% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gene_symbol_to_name.R
\name{gene_symbol_to_name}
\alias{gene_symbol_to_name}
\title{Convert gene symbols to names using AnnotationDbi}
\usage{
gene_symbol_to_name(
  genes,
  org = c("human", "mouse"),
  error.behavior = c("error", "na"),
  message = TRUE,
  warning = TRUE,
  error = TRUE,
  silent = NULL,
  ...
)
}
\arguments{
\item{genes}{a character vector of gene symbols}

\item{org}{one of "human", "mouse", or an \code{OrgDb} class object}

\item{error.behavior}{See details section:
\itemize{
\item \code{"error"} (default) = fail on error from call to AnnotationDbi::mapIds()
\item \code{"na"} = return vector of length \code{length(genes)} of NA values
}}

\item{message}{TRUE(default) = suppress messages from AnnotationDbi::mapIds()}

\item{warning}{TRUE(default) = suppress warnings from AnnotationDbi::mapIds()}

\item{error}{TRUE(default) = suppress errors from AnnotationDbi::mapIds()}

\item{silent}{Override message, warning, and error arguments above TRUE/FALSE

NULL (default) = no effect}

\item{...}{Arguments passed/overridden to \code{AnnotationDbi:mapIds()}}
}
\value{
A character vector of gene names / descriptions
}
\description{
Takes vector of HGNC human gene symbols or MGI mouse gene symbols and returns gene names/descriptions from the GENENAME column from \code{org.Hs.eg.db} or \code{org.Mm.eg.db}

Must install these packages from BioConductor (not automatically installed with this package)

\code{BiocManager::install("AnnotationDbi")}

\code{BiocManager::install("org.Hs.eg.db")}

\code{BiocManager::install("org.Mm.eg.db")}
}
\details{
\itemize{
\item \code{AnnotationDbi:mapIds()} is run here with the \code{multiVals = "first"} argument, can override this by supplying a different value in \code{...}
\item An error from AnnotationDbi is different from it just not finding a gene symbol in its database. By default it will return NA values for genes not found if it finds at least one match in the \code{genes} vector. The "na" argument here just aligns this behavior in the case that you supply a single invalid gene symbol (e.g., for use in loops).
}
}
\examples{
\dontrun{
genes <- c("CD3D", "CD4", "CD8A")
mk::gene_symbol_to_name(genes)
}
}
